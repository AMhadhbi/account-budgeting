-
   I select for this file a user that is not admin
-
  !context
    uid: 'res_users_barbara'
-
  I first create a budget item
-
  !record {model: budget.item, id: budget_item_1}:
    code: "BI1"
    name: "Budget item 1"
    account: [account.a_expense]
-
  I then create a budget
-
  !record {model: budget.budget, id: budget_test_1}:
    name: "Budget test"
    start_date: !eval "'%s-01-01' %(datetime.now().year)"
    end_date: !eval "'%s-12-31' %(datetime.now().year)"
    budget_item_id: budget_item_1
-
  and a budget version
-
  !record {model: budget.version, id: budget_version_1}:
    name: "Budget Version 1"
    budget_id: budget_test_1
    currency_id: base.EUR
-
  and a first budget line with description
-
  !record {model: budget.line, id: budget_line_1}:
    name: first budget line description
    analytic_account_id: account.analytic_agrolait
    budget_item_id: budget_item_1
    amount: 200.0
    currency_id: base.EUR
    budget_version_id: budget_version_1
-
  and a second budget line without description
-
  !record {model: budget.line, id: budget_line_2}:
    analytic_account_id: account.analytic_agrolait
    budget_item_id: budget_item_1
    amount: 300.0
    currency_id: base.EUR
    budget_version_id: budget_version_1
-
  I fill in the wizard to create an invoice
-
  !record {model: budget.line.invoice.create, id: wizard_1}:
    product_id: product.product_product_consultant
    partner_id: base.res_partner_1
-
  I click on the button to create the invoice
-
  !python {model: budget.line.invoice.create}: |
    self.do_create(cr, uid, [ref('wizard_1')], {
      'active_ids': [ref('budget_line_1'), ref('budget_line_2')]
    })
-
  I check that the invoice has been created an associated to the first line
-
  !python {model: budget.line}: |
    budget_line = self.browse(cr, uid, ref('budget_line_1'), context)
    assert budget_line.invoice_id, (
      'An invoice should be associated to the budget line')
-
  I check that the invoice is correct
-
  !python {model: budget.line}: |
    budget_line = self.browse(cr, uid, ref('budget_line_1'), context)
    invoice = budget_line.invoice_id
    assert len(invoice.invoice_line) == 2, 'The invoice should have two lines'
    assert invoice.amount_total == 500.0, 'The invoice total is incorrect'
